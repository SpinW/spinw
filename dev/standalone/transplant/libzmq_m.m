function [methodinfo,structs,enuminfo,ThunkLibName]=libzmq_m
%LIBZMQ_M Create structures to define interfaces found in 'transplantzmq'.

%This function was generated by loadlibrary.m parser version  on Fri Jul 21 14:57:03 2017
%perl options:'transplantzmq.i -outfile=libzmq_m.m -thunkfile=libzmq_thunk_maci64.c -header=transplantzmq.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libzmq_thunk_maci64');
% int zmq_errno ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='zmq_errno'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void * zmq_ctx_new ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='zmq_ctx_new'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int zmq_ctx_term ( void * context ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='zmq_ctx_term'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int zmq_msg_init ( zmq_msg_t * msg ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='zmq_msg_init'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr'};fcnNum=fcnNum+1;
% int zmq_msg_send ( zmq_msg_t * msg , void * s , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='zmq_msg_send'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int zmq_msg_recv ( zmq_msg_t * msg , void * s , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='zmq_msg_recv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int zmq_msg_close ( zmq_msg_t * msg ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='zmq_msg_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr'};fcnNum=fcnNum+1;
% void * zmq_msg_data ( zmq_msg_t * msg ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='zmq_msg_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'zmq_msg_tPtr'};fcnNum=fcnNum+1;
% void * zmq_socket ( void *, int type ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='zmq_socket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% int zmq_close ( void * s ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='zmq_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int zmq_connect ( void * s , const char * addr ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='zmq_connect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% int zmq_send ( void * s , const void * buf , size_t len , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrulongint32Thunk';fcns.name{fcnNum}='zmq_send'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'int32'};fcnNum=fcnNum+1;
structs.zmq_msg_t.members=struct('hidden', 'uint8#64');
methodinfo=fcns;